{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kavindulakshitha/Desktop/bd-income-tax-calculator/src/RightSideContent.js\",\n    _s = $RefreshSig$();\n\nimport { Col, Form, Row, Table } from \"react-bootstrap\";\nimport { useRef, useState } from \"react\";\nexport default function RightSideContent(props) {\n  _s();\n\n  const {\n    minimumTax,\n    lowerBound,\n    companies\n  } = props.values;\n  const [aitRef, investmentRef] = [useRef(), useRef()];\n  const [values, setValues] = useState({\n    ait: 0,\n    investment: 0\n  });\n\n  const handleChange = (name, value) => {\n    value = parseInt(value || 0, 10);\n    setValues(prevState => ({ ...prevState,\n      [name]: value\n    }));\n  };\n\n  const totalTaxableAmount = () => {\n    return companies.reduce((p, c) => p + c.net_taxable, 0);\n  };\n\n  const investmentSlabs = taxableIncome => {\n    const slabs = [];\n\n    if (taxableIncome > 3000000) {\n      slabs.push([.15, 250000]);\n      slabs.push([.12, 500000]);\n      slabs.push([.1]);\n    } else if (taxableIncome > 1000000) {\n      slabs.push([.15, 250000]);\n      slabs.push([.12]);\n    } else {\n      slabs.push([.15]);\n    }\n\n    return slabs;\n  };\n\n  const maxAllowedInvestment = () => {\n    return Math.min(.25 * totalTaxableAmount(), 15000000, values['investment']); // max can be 1.5Crore\n  };\n\n  const maxInvestmentRebate = () => {\n    if (!values['investment']) {\n      return 0;\n    }\n\n    const taxableIncome = totalTaxableAmount();\n\n    if (!taxableIncome) {\n      return 0;\n    }\n\n    const slabs = investmentSlabs(taxableIncome);\n    let rebate = 0;\n    let investment = maxAllowedInvestment();\n\n    for (let i = 0; i < slabs.length; ++i) {\n      var _slabs$i$;\n\n      let percent = slabs[i][0];\n      let upperBound = (_slabs$i$ = slabs[i][1]) !== null && _slabs$i$ !== void 0 ? _slabs$i$ : investment;\n\n      if (upperBound > investment) {\n        upperBound = investment;\n        investment = 0;\n      } else {\n        investment -= upperBound;\n      }\n\n      rebate = rebate + upperBound * percent;\n\n      if (investment === 0) {\n        break;\n      }\n    }\n\n    return rebate;\n  };\n\n  const taxBreakdown = () => {\n    let breakdown = {\n      gross: 0,\n      slabs: [{\n        next: lowerBound,\n        text: 'From 0 to ' + lowerBound,\n        as: '0%',\n        percent: 0,\n        remains: 0,\n        tax: 0\n      }, {\n        next: 100000,\n        text: 'For remaining next ' + 100000,\n        as: '5%',\n        percent: 0.05,\n        remains: 0,\n        tax: 0\n      }, {\n        next: 300000,\n        text: 'For remaining next 300000',\n        as: '10%',\n        percent: 0.1,\n        remains: 0,\n        tax: 0\n      }, {\n        next: 400000,\n        text: 'For remaining next 400000',\n        as: '15%',\n        percent: 0.15,\n        remains: 0,\n        tax: 0\n      }, {\n        next: 500000,\n        text: 'For remaining next ' + 500000,\n        as: '20%',\n        percent: 0.2,\n        remains: 0,\n        tax: 0\n      }, {\n        next: undefined,\n        text: 'For remaining everything else',\n        as: '25%',\n        percent: 0.25,\n        remains: 0,\n        tax: 0\n      }]\n    };\n    let gross = 0,\n        taxable = totalTaxableAmount();\n\n    if (!taxable) {\n      return breakdown;\n    }\n\n    if (taxable < lowerBound) {\n      return breakdown;\n    }\n\n    for (let i = 0; i < breakdown['slabs'].length; ++i) {\n      // get the current slab\n      let current = breakdown['slabs'][i]; // get the upper bound of this slab\n\n      let limit = current['next']; // if no upper bound is defined, then remaining taxable is the upper bound\n\n      if (limit === undefined) {\n        limit = taxable;\n      } // taxable reached the maximum limit\n\n\n      if (taxable <= limit) {\n        limit = taxable;\n        taxable = 0;\n      } else {\n        taxable -= limit;\n      }\n\n      let thisSlab = current['percent'] * limit;\n      breakdown['slabs'][i].tax = thisSlab;\n      breakdown['slabs'][i].remains = taxable;\n      gross += thisSlab;\n    }\n\n    breakdown.gross = gross && gross < minimumTax ? minimumTax : gross;\n    return breakdown;\n  };\n\n  const rebate = maxInvestmentRebate();\n  const netTaxableAmount = totalTaxableAmount();\n  const maxInvestment = maxAllowedInvestment();\n  const breakdown = taxBreakdown();\n  let finalLiability = breakdown['gross'] - (breakdown['gross'] ? rebate : 0) - (breakdown['gross'] ? values['ait'] : 0);\n\n  if (finalLiability < 0) {\n    finalLiability = 0;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      xs: \"12\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          min: \"0\",\n          className: \"form-control-sm\",\n          onChange: () => handleChange('ait', aitRef.current.value),\n          value: values['ait'],\n          ref: aitRef,\n          placeholder: \"Processed AIT by Company\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-info\",\n          children: \"Advance Income Tax [Deducted by Company]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          min: \"0\",\n          className: \"form-control-sm\",\n          onChange: () => handleChange('investment', investmentRef.current.value),\n          value: values['investment'],\n          ref: investmentRef,\n          placeholder: \"Total allowable Investment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-info\",\n          children: \"Allowable total investment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        size: \"sm\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Minimum tax\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: minimumTax\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Minimum taxable income\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: lowerBound\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"AIT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: values['ait']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Total investment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: values['investment']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Max allowed investment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: maxInvestment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Total taxable income\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: netTaxableAmount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Rebate from investment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: rebate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-secondary text-center\",\n        children: \"Tax breakdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive\",\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          size: \"sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total Income\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Percentage\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Calculated Tax\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Remaining\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [breakdown.slabs.map((slab, k) => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: slab.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"text-center\",\n                  children: slab.as\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"text-right\",\n                  children: slab.tax\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"text-right\",\n                  children: slab.remains\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 37\n                }, this)]\n              }, k, true, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 40\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Minimum/Gross Tax\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-right\",\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: breakdown['gross']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Investment rebate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-right\",\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: [\" - \", breakdown['gross'] ? rebate : 0]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"AIT deduction\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-right\",\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: [\" - \", values['ait']]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Net Tax liability\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-right\",\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: [\" = \", finalLiability]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 12\n  }, this);\n}\n\n_s(RightSideContent, \"GgUcVloSW72eoUozW4A4Xb5U8OU=\");\n\n_c = RightSideContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"RightSideContent\");","map":{"version":3,"sources":["/Users/kavindulakshitha/Desktop/bd-income-tax-calculator/src/RightSideContent.js"],"names":["Col","Form","Row","Table","useRef","useState","RightSideContent","props","minimumTax","lowerBound","companies","values","aitRef","investmentRef","setValues","ait","investment","handleChange","name","value","parseInt","prevState","totalTaxableAmount","reduce","p","c","net_taxable","investmentSlabs","taxableIncome","slabs","push","maxAllowedInvestment","Math","min","maxInvestmentRebate","rebate","i","length","percent","upperBound","taxBreakdown","breakdown","gross","next","text","as","remains","tax","undefined","taxable","current","limit","thisSlab","netTaxableAmount","maxInvestment","finalLiability","map","slab","k"],"mappings":"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","sourcesContent":["import {Col, Form, Row, Table} from \"react-bootstrap\";\nimport {useRef, useState} from \"react\";\n\nexport default function RightSideContent(props) {\n    const {minimumTax, lowerBound, companies} = props.values;\n\n    const [aitRef, investmentRef] = [useRef(), useRef()];\n\n    const [values, setValues] = useState({\n        ait: 0,\n        investment: 0,\n    });\n\n\n    const handleChange = (name, value) => {\n        value = parseInt(value || 0, 10);\n\n        setValues(prevState => ({\n            ...prevState,\n            [name]: value\n        }));\n    }\n\n    const totalTaxableAmount = () => {\n        return companies.reduce((p, c) => p + c.net_taxable, 0);\n    }\n\n    const investmentSlabs = (taxableIncome) => {\n        const slabs = [];\n        if (taxableIncome > 3000000) {\n            slabs.push([.15, 250000]);\n            slabs.push([.12, 500000]);\n            slabs.push([.1]);\n        } else if (taxableIncome > 1000000) {\n            slabs.push([.15, 250000]);\n            slabs.push([.12]);\n        } else {\n            slabs.push([.15]);\n        }\n\n        return slabs;\n    }\n\n    const maxAllowedInvestment = () => {\n        return Math.min(.25 * totalTaxableAmount(), 15000000, values['investment']); // max can be 1.5Crore\n    }\n\n    const maxInvestmentRebate = () => {\n        if (!values['investment']) {\n            return 0;\n        }\n\n        const taxableIncome = totalTaxableAmount();\n        if (!taxableIncome) {\n            return 0;\n        }\n\n        const slabs = investmentSlabs(taxableIncome);\n        let rebate = 0;\n        let investment = maxAllowedInvestment();\n\n        for (let i = 0; i < slabs.length; ++i) {\n            let percent = slabs[i][0];\n            let upperBound = slabs[i][1] ?? investment;\n            if (upperBound > investment) {\n                upperBound = investment;\n                investment = 0;\n            } else {\n                investment -= upperBound;\n            }\n\n            rebate = rebate + upperBound * percent;\n            if (investment === 0) {\n                break;\n            }\n        }\n\n        return rebate;\n    }\n\n    const taxBreakdown = () => {\n        let breakdown = {\n            gross: 0,\n            slabs: [\n                {\n                    next: lowerBound,\n                    text: 'From 0 to ' + lowerBound,\n                    as: '0%',\n                    percent: 0,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: 100000,\n                    text: 'For remaining next ' + 100000,\n                    as: '5%',\n                    percent: 0.05,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: 300000,\n                    text: 'For remaining next 300000',\n                    as: '10%',\n                    percent: 0.1,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: 400000,\n                    text: 'For remaining next 400000',\n                    as: '15%',\n                    percent: 0.15,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: 500000,\n                    text: 'For remaining next ' + 500000,\n                    as: '20%',\n                    percent: 0.2,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: undefined,\n                    text: 'For remaining everything else',\n                    as: '25%',\n                    percent: 0.25,\n                    remains: 0,\n                    tax: 0,\n                }\n            ]\n        };\n\n        let gross = 0, taxable = totalTaxableAmount();\n        if (!taxable) {\n            return breakdown;\n        }\n\n        if (taxable < lowerBound) {\n            return breakdown;\n        }\n\n        for (let i = 0; i < breakdown['slabs'].length; ++i) {\n            // get the current slab\n            let current = breakdown['slabs'][i];\n            // get the upper bound of this slab\n            let limit = current['next'];\n            // if no upper bound is defined, then remaining taxable is the upper bound\n            if (limit === undefined) {\n                limit = taxable;\n            }\n\n            // taxable reached the maximum limit\n            if (taxable <= limit) {\n                limit = taxable;\n                taxable = 0;\n            } else {\n                taxable -= limit;\n            }\n\n            let thisSlab = current['percent'] * limit;\n            breakdown['slabs'][i].tax = thisSlab;\n            breakdown['slabs'][i].remains = taxable;\n            gross += thisSlab;\n        }\n\n        breakdown.gross = gross && gross < minimumTax ? minimumTax : gross;\n\n        return breakdown;\n    }\n\n    const rebate = maxInvestmentRebate();\n\n    const netTaxableAmount = totalTaxableAmount();\n\n    const maxInvestment = maxAllowedInvestment();\n\n    const breakdown = taxBreakdown();\n\n    let finalLiability = breakdown['gross'] - (breakdown['gross'] ? rebate : 0) - (breakdown['gross'] ? values['ait'] : 0);\n    if (finalLiability < 0) {\n        finalLiability = 0;\n    }\n\n    return <Row>\n        <Col xs=\"12\">\n            <Form.Group>\n                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                              onChange={() => handleChange('ait', aitRef.current.value)}\n                              value={values['ait']} ref={aitRef} placeholder=\"Processed AIT by Company\"/>\n                <Form.Text className=\"text-info\">\n                    Advance Income Tax [Deducted by Company]\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                              onChange={() => handleChange('investment', investmentRef.current.value)}\n                              value={values['investment']} ref={investmentRef}\n                              placeholder=\"Total allowable Investment\"/>\n                <Form.Text className=\"text-info\">\n                    Allowable total investment\n                </Form.Text>\n            </Form.Group>\n\n            <Table size=\"sm\">\n                <tbody>\n                    <tr>\n                        <td>Minimum tax</td>\n                        <td><b>{minimumTax}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Minimum taxable income</td>\n                        <td><b>{lowerBound}</b></td>\n                    </tr>\n                    <tr>\n                        <td>AIT</td>\n                        <td><b>{values['ait']}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Total investment</td>\n                        <td><b>{values['investment']}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Max allowed investment</td>\n                        <td><b>{maxInvestment}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Total taxable income</td>\n                        <td><b>{netTaxableAmount}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Rebate from investment</td>\n                        <td><b>{rebate}</b></td>\n                    </tr>\n                </tbody>\n            </Table>\n            <hr/>\n            <p className='text-secondary text-center'>Tax breakdown</p>\n            <div className=\"table-responsive\">\n                <Table size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Total Income</th>\n                            <th>Percentage</th>\n                            <th>Calculated Tax</th>\n                            <th>Remaining</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            breakdown.slabs.map((slab, k) => {\n                                return <tr key={k}>\n                                    <td>{slab.text}</td>\n                                    <td className=\"text-center\">{slab.as}</td>\n                                    <td className=\"text-right\">{slab.tax}</td>\n                                    <td className=\"text-right\">{slab.remains}</td>\n                                </tr>\n                            })\n                        }\n                        <tr>\n                            <td><b>Minimum/Gross Tax</b></td>\n                            <td></td>\n                            <td className=\"text-right\">\n                                <b>{breakdown['gross']}</b>\n                            </td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td><b>Investment rebate</b></td>\n                            <td></td>\n                            <td className=\"text-right\">\n                                <b> - {breakdown['gross'] ? rebate : 0}</b>\n                            </td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td><b>AIT deduction</b></td>\n                            <td></td>\n                            <td className=\"text-right\">\n                                <b> - {values['ait']}</b>\n                            </td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td><b>Net Tax liability</b></td>\n                            <td></td>\n                            <td className=\"text-right\">\n                                <b> = {finalLiability}</b>\n                            </td>\n                            <td></td>\n                        </tr>\n                    </tbody>\n                </Table>\n            </div>\n        </Col>\n    </Row>;\n}"]},"metadata":{},"sourceType":"module"}